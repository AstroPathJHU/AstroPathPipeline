def GITHUB_TOKEN

node {
  withCredentials([string(credentialsId: 'astropath-github', variable: 'SECRET')]) {
    GITHUB_TOKEN = "${SECRET}"
  }
}

pipeline {
  agent {
    dockerfile {
      dir '.docker'
      additionalBuildArgs '--build-arg GITHUB_TOKEN="'+GITHUB_TOKEN+'"'
    }
  }

  environment {
    RUNNING_ON_JENKINS = "1"
    JENKINS_NO_GPU = "1"
    JENKINS_PARALLEL = "1"
    HOME = "/home/astropath"
    GITHUB_TOKEN = credentials('astropath-github')
  }

  stages {
        
    stage('ps module install') {
      steps {
	sh 'url="$(git config --get remote.origin.url)"; url="$(echo $url | sed s/github/astropathjhujenkins:${GITHUB_TOKEN}@github/)"; git fetch --tags -f "$url"'
        sh 'folder=$(basename $(pwd)); pwsh -File ./test/testpsimport.ps1'
      }
    }
    
    stage('run tests') {
      parallel {

        stage('ps utils') {
          steps {
	    sh 'folder=$(basename $(pwd)); pwsh -File ./test/testsharedtools.ps1'
	    sh 'folder=$(basename $(pwd)); pwsh -File ./test/testaptables.ps1'            
            sh 'folder=$(basename $(pwd)); pwsh -File ./test/testpslogger.ps1'
          }
        }

        stage('ps shredxml') {
          steps {
            sh 'folder=$(basename $(pwd)); pwsh -File ./test/testpsshredxml.ps1'
          }
        }

        stage('ps meanimage') {
          steps {
            sh 'folder=$(basename $(pwd)); pwsh -File ./test/testpsmeanimage.ps1'
          }
        }

      }
    }
   
  }
  post {
    always {
      archiveArtifacts artifacts: 'documents/annowarp/annowarp.pdf', fingerprint: true
      archiveArtifacts artifacts: 'documents/flatfield/flatfield_documentation.pdf', fingerprint: true
      archiveArtifacts artifacts: 'test/test_for_jenkins/**', fingerprint: true, allowEmptyArchive: true
    }
  }
}
