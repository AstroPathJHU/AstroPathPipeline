node {
  docker.image('astropathjhu/alignmenttest:v18').inside {
    withEnv([
      'JENKINS_NO_GPU=1',
      'HOME=/home/circleci',
    ]) {
      withCredentials([
        string(credentialsId: 'astropath-github', variable: 'GITHUB_TOKEN'),
      ]) {
        try {
          stage('checkout') {
            sh 'checkout scm'
          }
          stage('pip install') {
            sh 'url="$(git config --get remote.origin.url)"; url="$(echo $url | sed s/github/astropathjhujenkins:${GITHUB_TOKEN}@github/)"; git fetch --tags "$url"'
            sh 'pip install .'
            sh '''echo "from astropath_calibration.utilities.version import astropathversion; print(astropathversion); assert astropathversion != 'unknown version'" | python'''
            sh '''cd ..; echo "from astropath_calibration.utilities.version import astropathversion; print(astropathversion); assert astropathversion != 'unknown version'" | python'''
          }

          //https://stackoverflow.com/questions/46834998/scripted-jenkinsfile-parallel-stage
          stage('setup') {
            parallel([
              'setup dbload folder': {
                sh 'folder=$(basename $(pwd)); cd ..; python -m unittest ${folder}.test.testprepdb'
              },
              'extract flatw layer': {
                sh 'folder=$(basename $(pwd)); cd ..; extractlayer ${folder}/test/data/ ${folder}/test/data/flatw M21_1 --layer 1'
              },
            ])
          }

          stage('run tests') {
            parallel([
              'alignment': {
                stage('test alignment') {
                  steps {
                    sh 'folder=$(basename $(pwd)); cd ..; python -m unittest ${folder}.test.testalignment'
                  }
                }
              },
              'alignment documentation': {
                stage('align') {
                  sh 'alignmentcohort test/data test/data/flatw --sampleregex M21_1'
                }
                stage('alignment documentation') {
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.documentation.alignment.makeplots --testing'
                  sh 'cd documentation/alignment; pdflatex alignment_stitching.tex; pdflatex alignment_stitching.tex; pdflatex alignment_stitching.tex'
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.documentation.checklog ${folder}/documentation/alignment/alignment_stitching.log'
                }
              },
              'zoom annowarp deepzoom pipeline': {
                stage('test zoom') {
                  sh 'folder=$(basename $(pwd)); cd ..; python -m unittest ${folder}.test.testzoom'
                }
                stage('test annowarp') {
                  sh 'folder=$(basename $(pwd)); cd ..; python -m unittest ${folder}.test.testannowarp'
                }
                parallel([
                  'annowarp plots': {
                    sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.documentation.annowarp.makeplots'
                    sh 'cd documentation/annowarp; pdflatex annowarp.tex; pdflatex annowarp.tex; pdflatex annowarp.tex'
                    sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.documentation.checklog ${folder}/documentation/annowarp/annowarp.log'
                  },
                  'deepzoom': {
                    sh 'folder=$(basename $(pwd)); cd ..; python -m unittest ${folder}.test.testdeepzoom'
                  },
                ])
              },
              'align layers': {
                stage('test align layers') {
                  sh 'folder=$(basename $(pwd)); cd ..; python -m unittest ${folder}.test.testalignlayers'
                }
                stage('layer PCA plots') {
                  sh 'cd documentation/layerPCA; pdflatex layerPCA.tex; pdflatex layerPCA.tex; pdflatex layerPCA.tex'
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.documentation.checklog ${folder}/documentation/layerPCA/layerPCA.log'
                }
              },

              'warping': {
                stage('test warping') {
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.test.testwarping'
                }
                stage('test warpfitter') {
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.test.testwarpfitter'
                }
              },

              'interactive flatfielding': {
                stage('test flatfield') {
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.test.testflatfield'
                }
                stage('flatfield documentation') {
                  sh 'cd documentation/flatfield; pdflatex flatfield_documentation.tex; bibtex flatfield_documentation; pdflatex flatfield_documentation.tex; pdflatex flatfield_documentation.tex'
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.documentation.checklog ${folder}/documentation/flatfield/flatfield_documentation.log'
                }
              },

              'test batch mode flatfield': {
                sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.test.testflatfieldbatchmodes'
              },

              'exposure time correction': {
                stage('test exposuretime') {
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.test.testexposuretimefit'
                }
                stage('exposuretime documentation') {
                  sh 'cd documentation/exposuretime; pdflatex exposuretime_documentation.tex; bibtex exposuretime_documentation; pdflatex exposuretime_documentation.tex; pdflatex exposuretime_documentation.tex'
                  sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.documentation.checklog ${folder}/documentation/exposuretime/exposuretime_documentation.log'
                }
              },

              'test image correction': {
                sh 'folder=$(basename $(pwd)); cd ..; python -m ${folder}.test.testimagecorrection'
              },

              'code checks': {
                sh 'python -m pyflakes .'
              },
            ])
          }

          stage('check that the repo is clean') {
            //make sure normal execution doesn't make files that aren't ignored by .gitignore
            sh 'if ! [ -z "$(git status --porcelain)" ]; then echo "tests created uncommitted changes"; git status; git diff; git submodule foreach bash -c "git status; git diff"; exit 1; fi'
            sh 'chmod u-x $(find $(git ls-files) -maxdepth 0 -type f); git diff --exit-code || (echo "The above files ^^^^^^ are chmodded to +x.  This causes git status to show up as dirty on windows."; exit 1)'
            sh '''git submodule foreach bash -c 'chmod u-x $(find $(git ls-files) -maxdepth 0 -type f); git diff --exit-code || (echo "The above files ^^^^^^ are chmodded to +x.  This causes git status to show up as dirty on windows."; exit 1)\''''
          }
        } finally {
          archiveArtifacts artifacts: 'documentation/alignment/alignment_stitching.pdf', fingerprint: true
          archiveArtifacts artifacts: 'documentation/annowarp/annowarp.pdf', fingerprint: true
          archiveArtifacts artifacts: 'documentation/flatfield/flatfield_documentation.pdf', fingerprint: true
          archiveArtifacts artifacts: 'documentation/exposuretime/exposuretime_documentation.pdf', fingerprint: true
          archiveArtifacts artifacts: 'documentation/layerPCA/layerPCA.pdf', fingerprint: true
          archiveArtifacts artifacts: 'test/annowarp_test_for_jenkins/*', fingerprint: true, allowEmptyArchive: true
          archiveArtifacts artifacts: 'test/deepzoom_test_for_jenkins/*', fingerprint: true, allowEmptyArchive: true
          archiveArtifacts artifacts: 'test/exposuretimefit_test_for_jenkins/*', fingerprint: true, allowEmptyArchive: true
          archiveArtifacts artifacts: 'test/warpfitter_test_for_jenkins/*', fingerprint: true, allowEmptyArchive: true
          archiveArtifacts artifacts: 'test/zoom_test_for_jenkins/*', fingerprint: true, allowEmptyArchive: true
        }
      }
    }
  }
}
